import pandas as pd
from sklearn.preprocessing import StandardScaler, LabelEncoder
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans
from scipy.cluster.hierarchy import dendrogram, linkage, fcluster

# Cargar el dataset
file_path = 'Mall_Customers.csv'
df = pd.read_csv(file_path)

# Información general del dataframe
df_info = df.info()

# Estadísticas descriptivas
df_describe = df.describe()

# Distribución de variables categóricas
gender_distribution = df['Gender'].value_counts()

# Matriz de correlación
correlation_matrix = df.corr()

# Visualización de distribuciones y relaciones entre variables
sns.set(style="whitegrid")

# Distribución de la edad
plt.figure(figsize=(10, 6))
sns.histplot(df['Age'], kde=True)
plt.title('Distribución de la Edad')
plt.xlabel('Edad')
plt.ylabel('Frecuencia')
plt.show()

# Distribución del ingreso anual
plt.figure(figsize=(10, 6))
sns.histplot(df['Annual Income (k$)'], kde=True)
plt.title('Distribución del Ingreso Anual')
plt.xlabel('Ingreso Anual (k$)')
plt.ylabel('Frecuencia')
plt.show()

# Distribución del puntaje de gasto
plt.figure(figsize=(10, 6))
sns.histplot(df['Spending Score (1-100)'], kde=True)
plt.title('Distribución del Puntaje de Gasto')
plt.xlabel('Puntaje de Gasto (1-100)')
plt.ylabel('Frecuencia')
plt.show()

# Relación entre ingreso anual y puntaje de gasto
plt.figure(figsize=(10, 6))
sns.scatterplot(x='Annual Income (k$)', y='Spending Score (1-100)', hue='Gender', data=df)
plt.title('Relación entre Ingreso Anual y Puntaje de Gasto')
plt.xlabel('Ingreso Anual (k$)')
plt.ylabel('Puntaje de Gasto (1-100)')
plt.show()

# Relación entre edad y puntaje de gasto
plt.figure(figsize=(10, 6))
sns.scatterplot(x='Age', y='Spending Score (1-100)', hue='Gender', data=df)
plt.title('Relación entre Edad y Puntaje de Gasto')
plt.xlabel('Edad')
plt.ylabel('Puntaje de Gasto (1-100)')
plt.show()

# Preprocesamiento de datos
# Codificar la variable de género
le = LabelEncoder()
df['Gender'] = le.fit_transform(df['Gender'])

# Seleccionar características relevantes
features = ['Gender', 'Age', 'Annual Income (k$)', 'Spending Score (1-100)']

# Normalización de datos
scaler = StandardScaler()
df_scaled = pd.DataFrame(scaler.fit_transform(df[features]), columns=features)

# Método del codo para determinar el número óptimo de clústeres
sse = []
for k in range(1, 11):
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(df_scaled)
    sse.append(kmeans.inertia_)

# Graficar el método del codo
plt.figure(figsize=(10, 6))
plt.plot(range(1, 11), sse, marker='o')
plt.title('Método del Codo')
plt.xlabel('Número de Clústeres')
plt.ylabel('SSE')
plt.show()

# Entrenar el modelo K-means con el número óptimo de clústeres (suponiendo que k=5)
kmeans = KMeans(n_clusters=5, random_state=42)
kmeans.fit(df_scaled)
df['KMeans_Labels'] = kmeans.labels_

# Clustering Jerárquico
# Crear el linkage matrix
Z = linkage(df_scaled, method='ward')

# Dendrograma
plt.figure(figsize=(15, 10))
dendrogram(Z, truncate_mode='level', p=5)
plt.title('Dendrograma')
plt.xlabel('Índice del Cliente')
plt.ylabel('Distancia')
plt.show()

# Cortar el dendrograma para formar clústeres (suponiendo que queremos 5 clústeres)
df['Hierarchical_Labels'] = fcluster(Z, 5, criterion='maxclust')

# Guardar el dataframe resultante con las etiquetas de los clústeres
df.to_csv('Mall_Customers_Clustered.csv', index=False)
